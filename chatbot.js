// Importa√ß√µes de bibliotecas (sem altera√ß√£o)
import qrcode from 'qrcode-terminal';
import { Client } from 'whatsapp-web.js';
import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from 'dotenv';

// --- CONFIGURA√á√ÉO DAS APIS (sem altera√ß√£o) ---

dotenv.config();
const client = new Client();
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });

// --- INICIALIZA√á√ÉO DO WHATSAPP (sem altera√ß√£o) ---

client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});

client.initialize();

// --- L√ìGICA DO CHATBOT (REESTRUTURADA) ---

// 1. Objeto para guardar as SESS√ïES de chat de cada usu√°rio
// Em vez de 'userStates', vamos guardar o objeto de chat inteiro.
const userChatSessions = {};

// 2. Hist√≥rico de instru√ß√µes para o Gemini
// Este √© o "c√©rebro" do seu tradutor. Ele ensina o Gemini a se comportar.
const instructionHistory = [
  {
    role: "user",
    // Instru√ß√£o clara e direta para o modelo.
    parts: [{ text: "Voc√™ √© um assistente de tradu√ß√£o de portugu√™s para ingl√™s. Sua √∫nica fun√ß√£o √© traduzir o texto que eu enviar. Responda APENAS com a tradu√ß√£o direta, sem adicionar sauda√ß√µes, explica√ß√µes ou qualquer texto extra como 'A tradu√ß√£o √©:'." }],
  },
  {
    role: "model",
    // Simula a confirma√ß√£o do modelo, refor√ßando a instru√ß√£o.
    parts: [{ text: "Entendido. A partir de agora, responderei apenas com a tradu√ß√£o para o ingl√™s do texto que voc√™ me enviar." }],
  },
];


// Listener de mensagens do WhatsApp (L√ìGICA PRINCIPAL ALTERADA)
client.on('message', async msg => {
    // Ignora mensagens de grupos (sem altera√ß√£o)
    if (!msg.from.endsWith('@c.us')) {
        return;
    }

    const userMessage = msg.body.trim();
    const userNumber = msg.from;
    const chat = await msg.getChat();

    // COMANDO PARA SAIR/RESETAR O MODO DE TRADU√á√ÉO
    if (userMessage.toLowerCase() === '/sair') {
        // Se o usu√°rio tinha uma sess√£o ativa, apague-a.
        if (userChatSessions[userNumber]) {
            delete userChatSessions[userNumber];
            await client.sendMessage(userNumber, 'Modo tradutor desativado. üëã');
        }
        return; // Encerra o processamento
    }

    // Verifica se j√° existe uma sess√£o de chat para este usu√°rio
    let userChat = userChatSessions[userNumber];

    // Se N√ÉO existir uma sess√£o de chat...
    if (!userChat) {
        // ...e a mensagem for o comando para come√ßar...
        if (userMessage.toLowerCase() === '/ia') {
            await chat.sendStateTyping();

            // ...inicia uma nova sess√£o de chat com as instru√ß√µes!
            userChat = model.startChat({
                history: instructionHistory,
            });
            
            // Armazena a nova sess√£o para o usu√°rio
            userChatSessions[userNumber] = userChat;
            
            await client.sendMessage(userNumber, 'Ol√°! Modo tradutor ativado. ‚úçÔ∏è\n\nEnvie o que deseja traduzir. Para sair, digite `/sair`.');
        }
        // Se n√£o houver sess√£o e a mensagem n√£o for /ia, o bot n√£o faz nada.
        return;
    }

    // Se J√Å EXISTE uma sess√£o de chat, qualquer mensagem enviada √© para tradu√ß√£o.
    await chat.sendStateTyping();

    try {
        // Envia a mensagem do usu√°rio para o chat existente do Gemini
        const result = await userChat.sendMessage(userMessage);
        const response = result.response;
        const textoTraduzido = response.text();

        // Envia a tradu√ß√£o de volta para o usu√°rio
        await client.sendMessage(userNumber, textoTraduzido);

    } catch (error) {
        console.error("Erro na tradu√ß√£o com a sess√£o de chat:", error);
        await client.sendMessage(userNumber, "Desculpe, ocorreu um erro. Tente novamente ou digite `/sair` para reiniciar.");
    }
});